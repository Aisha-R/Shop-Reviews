openapi: 3.0.0
info:
  title: Review-System API
  description: Node.js + MySQL - API documentation
  version: 1.0.0

tags:
  - name: Auth
    description: User authentication
  - name: Users
    description: Manage users
  - name: Businesses
    description: Manage businesses
  - name: Reviews
    description: Manage reviews

servers:
  - url: http://localhost:3000
    description: Local development server

# *** Auth ***
paths:
  /login:
    post:
      tags:
       - Auth
      summary: Logs user into the system
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "test@gmail.com"
                password:
                  type: string
                  example: "12345"
              required:
                - email
                - password
      responses:
        "200":
          description: User is authenticated. Returns a JWT access token and a refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  acessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxNTE5NjA4LCJleHAiOjE2MjE1MjAyMDh9.SUuvvWanBMyPOcKdlEw7R_q_qPVSX9qgGq3B8rDs2_8"
                  refreshToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxNTE5NjA4fQ.eNoQvzcRuujIH0UMUY54-UDeqPX79XFsRNxaOAwt_tc"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "400":
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"
  /token:
    post:
      tags:
        - Auth
      summary: Create a new access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxMzY5MjA1fQ.J38ddVRn8G7LIqeShsqeJOQpyFadCBH-3BlBp3RXrNs"
      responses:
        "200":
          description: Returns a new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxMzcwNzAyLCJleHAiOjE2MjEzNzEzMDJ9.9qXuZ1vucbCKgnAwMbg5gJaMlzUZrds-zU3xGtTrVlg"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description:  Forbidden
  /logout:
    delete:
      tags:
        - Auth
      summary: Logs out current logged in user session
      descrption: Refresh token is deleted from the database
      security:
        - bearerAuth: []
      parameters:
       -  in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxMzY5MjA1fQ.J38ddVRn8G7LIqeShsqeJOQpyFadCBH-3BlBp3RXrNs"
      responses:
        "204":
          description: User logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxMzcwNzAyLCJleHAiOjE2MjEzNzEzMDJ9.9qXuZ1vucbCKgnAwMbg5gJaMlzUZrds-zU3xGtTrVlg"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          description:  Forbidden

# *** Users ***
  /users:
    post:
      tags:
        - Users
      summary: Create user
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                profilePicture:
                  type: string
                  example: "http://dummyimage.com/180x103.png/5fa2dd/ffffff"
                email:
                  type: string
                  example: "test@gmail.com"
                password:
                  type: string
                  example: "12345"
                country:
                  type: string
                  example: "Denmark"
                city:
                  type: string
                  example: "Copenhagen"
              required:
                - firstName
                - lastName
                - email
                - password
      responses:
        "201":
          description: "A user was created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful"
  /users/:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      parameters:
       - in: query
         name: search
         description: Free text search in the 'firstName', 'lastName', 'email' fields
         schema:
           type: string
           example: "Emma"
       - in: query
         name: filter
         description: Filter by key value. Formatted as ["KEY", "VALUE"]
         schema:
           example: "[\"city\", \"Sobrosa\"]"
       - in: query
         name: sort
         description: Sort by a key. Formatted as ["KEY", "ASC"] or ["KEY", "DESC"]
         schema:
           example: "[\"city\", \"ASC\"]"
       - in: query
         name: range
         description: Range of the results. Formated as [START_INDEX, END_INDEX]
         schema:
           example: "[0, 9]"
      responses:
        "200":
          description: List of all users details
          content:
              schema:
                $ref: '#/components/schemas/User'
                properties:
                  message:
                    type: string
                    example: "OK"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/{id}:
    delete:
      tags:
        - Users
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
        - in: path
          name: id
          schema:
            type: string
            example: "22"
          required: true
      responses:
        "200":
          description: User deleted
          content:
            schema:
              $ref: '#/components/schemas/User'
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /updateprofilepictureinuser:
    patch:
      tags:
        - Users
      summary: Updates user's picture
      security:
        - bearerAuth: []
      parameters:
       -  in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profilePicture:
                  type: string
                  example: "http://dummyimage.com/180x103.png/5fa2dd/ffffff"
      responses:
        "200":
          description: Picture uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  profilePicture:
                    type: string
                    example: "http://dummyimage.com/180x103.png/5fa2dd/ffffff"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /updatecountryinuser:
    patch:
      tags:
        - Users
      summary: Updates country in  user
      security:
        - bearerAuth: []
      parameters:
       -  in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                country:
                  type: string
                  example: "Denmark"
      responses:
        "200":
          description: Country updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  country:
                    type: string
                    example: "Denmark"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /updatecityinuser:
    patch:
      tags:
        - Users
      summary: Updates country in  user
      security:
        - bearerAuth: []
      parameters:
       -  in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                city:
                  type: string
                  example: "Copenhagen"
      responses:
        "200":
          description: Country updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  city:
                    type: string
                    example: "Copenhagen"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

# *** Businesses ***
  /businesses:
    post:
      tags:
        - Businesses
      summary: Create a business
      operationId: create
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Photobeast"
                description:
                  type: string
                  example: "i sell stuff"
                category:
                  type: string
                  example: "photo"
                address:
                  type: string
                  example: "street123"
                city:
                  type: string
                  example: "hong kong"
                country:
                  type: string
                  example: "China"
                postCode:
                  type: string
                  example: "2300"
                phoneNumber:
                  type: string
                  example: "111-111"
                webSite:
                  type: string
                  example: "myWebsite"
                email:
                  type: string
                  example: test@gmail.com
              required:
                - title
                - description
                - category
                - address
                - country
                - postCode
                - phoneNumber
                - webSite
                - email
      responses:
        "201":
          description: "A businesses was created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Business created"
  /businesses/:
    get:
      tags:
        - Businesses
      summary: Get all businesses
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          description: Free text search in the "title", "description", "category", "address" fields
          schema:
            type: string
            example: "sk"
        - in: query
          name: filter
          description: Filter by key value. Formatted as ["KEY", "VALUE"]
          schema:
            example: "[\"postCode\", \"4935-621\"]"
        - in: query
          name: sort
          description: Sort by a key. Formatted as ["KEY", "ASC"] or ["KEY", "DESC"]
          schema:
            example: "[\"country\", \"ASC\"]"
        - in: query
          name: range
          description: Range of the results. Formated as [START_INDEX, END_INDEX]
          schema:
            example: "[0, 9]"
      responses:
        "200":
          description: List of all businesses details
          content:
              schema:
                $ref: '#/components/schemas/Business'
                properties:
                  message:
                    type: string
                    example: "OK"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /businesses/{id}:
    get:
      tags:
       - Businesses
      summary: Get a business by ID
      security:
        - bearerAuth: []
      parameters:
       -  in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
       -  in: path
          name: id
          schema:
            type: integer
            example: "id"
          required: true
      responses:
        "200":
          description: Find business by ID
          content:
            schema:
              $ref: '#/components/schemas/Business'
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
           $ref: "#/components/responses/NotFoundError"
    delete:
      tags:
        - Businesses
      summary: Delete a business
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
        -  in: path
           name: id
           schema:
             type: integer
             example: "id"
           required: true
      responses:
        "200":
          description: Business deleted
          content:
            schema:
              $ref: '#/components/schemas/Business'
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      tags:
        - Businesses
      summary: Updates a bussiness
      security:
        - bearerAuth: []
      parameters:
       -  in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
       -  in: path
          name: id
          schema:
            type: integer
            example: "id"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 50
                title:
                  type: string
                  example: "myNewBusiness"
      responses:
        "200":
          description: Business title updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    example: "myNewBusiness"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

# *** Reviews ***
  /reviews:
    post:
      tags:
        - Reviews
      summary: Create a review
      operationId: create
      security:
        - bearerAuth: []
      parameters:
       -  in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reviewText:
                  type: string
                  example: "Some review text"
                stars:
                  type: integer
                  example: 5
                reviewDate:
                  type: string
                  example: "2021-03-03"
                likeCount:
                  type: integer
                  example: 1
                BusinessID:
                  type: integer
                  example: 43
                LanguageID:
                  type: integer
                  example: 1
              required:
                - reviewText
                - stars
                - reviewDate
                - likeCount
                - BusinessID
                - LanguageID
      responses:
        "201":
          description: "Review created"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Review created"
    get:
      tags:
        - Reviews
      summary: Get all reviews
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          description: Free text search in the 'reviewText' fields
          schema:
            type: string
            example: "ipsum"
        - in: query
          name: filter
          description: Filter by key value. Formatted as ["KEY", "VALUE"]
          schema:
            example: "[\"stars\", 4]"
        - in: query
          name: sort
          description: Sort by a key. Formatted as ["KEY", "ASC"] or ["KEY", "DESC"]
          schema:
            example: "[\"stars\", \"ASC\"]"
        - in: query
          name: range
          description: Range of the results. Formated as [START_INDEX, END_INDEX]
          schema:
            example: "[0, 9]"
      responses:
        "200":
          description: List of all reviews details
          content:
              schema:
                $ref: '#/components/schemas/Review'
                properties:
                  message:
                    type: string
                    example: "OK"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /reviews/${id}:
    delete:
      tags:
        - Reviews
      summary: Delete a review
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Token
          schema:
            type: string
            example: "Token"
          required: true
        -  in: path
           name: id
           schema:
             type: integer
             example: "id"
           required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: id
                  example: 285
              required:
                - id
      responses:
        "200":
          description: Review deleted
          content:
            schema:
              $ref: '#/components/schemas/Review'
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      tags:
        - Reviews
      summary: Updates text in a review
      security:
        - bearerAuth: []
      parameters:
        -  in: path
           name: id
           schema:
             type: integer
             example: "id"
           required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  example: 288
                reviewText:
                  type: string
                  example: "new review text"
      responses:
        "200":
          description: Review text updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    example: "new review text"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        ID:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        profilePicture:
          type: string
        password:
          type: string
        email:
          type: string
        country:
          type: string
        city:
          type: string
        numberOfReviews:
          type: integer
        numberOfLikes:
          type: integer
        numberOfPhotos:
          type: integer
    Business:
      type: object
      properties:
        ID:
          type: integer
        title:
          type: string
        description:
          type: integer
        category:
          type: string
        address:
          type: string
        city:
          type: string
        country:
          type: string
        postCode:
          type: string
        phoneNumber:
          type: string
        webSite:
          type: string
        email:
          type: string
    Review:
      type: object
      properties:
        ID:
          type: integer
        reviewText:
          type: string
        stars:
          type: integer
        reviewDate:
          type: string
        likeCount:
          type: integer
        UserID:
          type: integer
        BusinessID:
          type: integer
        LanguageID:
          type: integer
  responses:
    UnauthorizedError:
      description: You need to be authenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Resource not found
      content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Not Found"

