openapi: 3.0.0
info:
  title: Reviews-System API
  description: Node.js + MySQL - API documentation
  version: 1.0.0

tags:
  - name: Auth
    description: User authentication

  - name: Users
    description: Manage users

  - name: Businesses
    description: Manage businesses

  - name: Reviews
    description: Manage reviews

servers:
  - url: http://localhost:3000
    description: Local development server

# *** Auth ***
paths:
  /login:
    post:
      tags:
       - Auth 
      summary: Logs user into the system
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:  
                  type: string
                  example: "test@gmail.com"
                password:
                  type: string
                  example: "1234"
              required:
                - email
                - password
      responses:
        "200":
          description: User is authenticated. Returns a JWT access token and a refresh token
          content:
            application/json:
              schema:
                type: object
                properties:
                  acessToken:
                    type: string
                    example: "string"
                  refreshToken:
                    type: string
                    example: "string"
        "401":
          description: User is unauthorized
        "400":
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"
  /token:
    post:
      tags:
        - Auth
      summary: Create a new access token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:  
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxMzY5MjA1fQ.J38ddVRn8G7LIqeShsqeJOQpyFadCBH-3BlBp3RXrNs"
      responses:
        "200":
          description: Returns a new access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxMzcwNzAyLCJleHAiOjE2MjEzNzEzMDJ9.9qXuZ1vucbCKgnAwMbg5gJaMlzUZrds-zU3xGtTrVlg"
        "401":
          description: User is unauthorized
        "403":
          description:  Forbidden

  /logout:
    post:
      tags:
        - Auth
      summary: Logs out current logged in user session

# *** Users ***
  /createuser:
    post:
      tags:
        - Users
      summary: Create user
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                profilePicture:
                  type: string
                  example: "http://dummyimage.com/180x103.png/5fa2dd/ffffff"
                email:
                  type: string
                  example: "john@gmail.com"
                password:
                  type: string
                  example: "pass123"
                country:
                  type: string
                  example: "Denmark"
                city:
                  type: string
                  example: "Copenhagen"
              required:
                - firstName
                - lastName
                - email
                - password
      responses: 
        "201":
          description: "A user was created"
          content:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Registration successful"
  /readallusers:
    get:
      tags:
        - Users
      summary: Get all users
      security:
        - bearerAuth: []
      parameters:
       -  in: header
          name: Token
          schema: 
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImNodWNrQGdtYWlsLmNvbSIsImlkIjoyMywiaWF0IjoxNjIxNTA1NTMyLCJleHAiOjE2MjE1MDYxMzJ9.2REuDzee22_1l2AItLg5bkqiiof-MVDn9sv69TmwbiE   
      reponses:
        "200":
          description: Success Response
          constent:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OK"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /readuser:
    get:
      tags:
       - Users
      summary: Get a user

  /deleteuser:
    get:
      tags:
        - Users
      summary: Delete user

  /updateprofilepictureinuser:
    patch:
      tags:
        - Users
      summary: Updates a user's image
  
  /updatecountryinuser:
    patch:
      tags:
        - Users
      summary: Updates a user's country
  
  /updatecityinuser:
    patch:
      tags:
        - Users
      summary: Updates a user's city

# *** Businesses ***
  /createbusiness:
    post:
      tags:
        - Businesses
      summary: Create a business

  /readallbusinesses:
    get:
      tags:
        - Businesses
      summary: Get all businesses
  
  /readbusiness/:id:
    get:
      tags:
       - Businesses
      summary: Get a business by ID

  /deletebusiness:
    get:
      tags:
        - Businesses
      summary: Delete a business

  /updatemailinbusiness:
    patch:
      tags:
        - Businesses
      summary: Updates a business email
  
  /updatephonenumberinbusiness:
    patch:
      tags:
        - Businesses
      summary: Updates a business phone number
  
  /updatewebsiteinbusiness:
    patch:
      tags:
        - Businesses
      summary: Updates a business website

# *** Reviews ***
  /createreview:
    post:
      tags:
        - Reviews
      summary: Create a review

  /readallreviews:
    get:
      tags:
        - Reviews
      summary: Get all reviews
  
  /readreviewsbybusiness:
    get:
      tags:
       - Reviews
      summary: Get reviews by business

  /readreviewsbystars:
    get:
      tags:
       - Reviews
      summary: Get reviews by stars
  
  /readreviewsbyuser:
    get:
      tags:
       - Reviews
      summary: Get reviews by user
  
  /readreviewsbylanguage:
    get:
      tags:
       - Reviews
      summary: Get reviews by language
  
  /deletereview:
    get:
      tags:
        - Reviews
      summary: Delete a review

  /updatetextinreview:
    patch:
      tags:
        - Reviews
      summary: Updates text in a review
  
  /updatestarsinreview:
    patch:
      tags:
        - Reviews
      summary: Updates stars in a review
  
  /updatelikeinreview:
    patch:
      tags:
        - Reviews
      summary: Updates likes in a review"

  
  

